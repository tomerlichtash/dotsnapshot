name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      upload_url: ${{ steps.semantic.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/git
        npm install -g @semantic-release/github
        npm install -g @semantic-release/exec
        npm install -g conventional-changelog-conventionalcommits

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run semantic release
      id: semantic
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dotsnapshot
            asset_name: dotsnapshot-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dotsnapshot.exe
            asset_name: dotsnapshot-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dotsnapshot
            asset_name: dotsnapshot-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dotsnapshot
            asset_name: dotsnapshot-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ needs.release.outputs.new_release_version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/registry/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload release binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.release.outputs.new_release_version }}
        files: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        name: ${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    needs: [release, build-release]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ needs.release.outputs.new_release_version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      continue-on-error: true