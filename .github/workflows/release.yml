name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Branch-Based Release
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true && 
      startsWith(github.head_ref, 'release/v')
    outputs:
      new_release_created: "true"
      release_tag: ${{ steps.version.outputs.tag }}
      new_release_published: "true"
      new_release_version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Extract version from branch name
      id: version
      run: |
        # release/v1.3.0 → 1.3.0
        VERSION=$(echo ${{ github.head_ref }} | sed 's/release\/v//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Update version for release (temporary)
      run: |
        # Update version temporarily for this build only using awk (more reliable than sed)
        awk -v ver="${{ steps.version.outputs.version }}" '/^version = / { sub(/= "[^"]*"/, "= \"" ver "\""); print; next } {print}' Cargo.toml > Cargo.toml.new && mv Cargo.toml.new Cargo.toml
        cargo update --package dotsnapshot --precise "${{ steps.version.outputs.version }}"
        
    - name: Build release binary
      run: |
        cargo build --release
        
    - name: Verify binary version
      run: |
        BINARY_VERSION=$(target/release/dotsnapshot --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
        if [ "$BINARY_VERSION" != "${{ steps.version.outputs.version }}" ]; then
          echo "❌ Version mismatch: binary reports $BINARY_VERSION, expected ${{ steps.version.outputs.version }}"
          exit 1
        fi
        echo "✅ Binary version verified: $BINARY_VERSION"
        
    - name: Extract release notes from CHANGELOG.md
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # Extract content for this version from CHANGELOG.md
          awk '/^## \[${{ steps.version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > RELEASE_NOTES.md
          
          # If nothing was extracted, fall back to git log
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "No changelog entry found, generating from git log"
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              git log --oneline "${LAST_TAG}..HEAD" --pretty=format:"- %s" > RELEASE_NOTES.md
            else
              echo "Initial release" > RELEASE_NOTES.md
            fi
          fi
        else
          echo "CHANGELOG.md not found, generating from git log"
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --oneline "${LAST_TAG}..HEAD" --pretty=format:"- %s" > RELEASE_NOTES.md
          else
            echo "Initial release" > RELEASE_NOTES.md
          fi
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: release
    if: always() && needs.release.result == 'success'
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dotsnapshot
            asset_name: dotsnapshot-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dotsnapshot.exe
            asset_name: dotsnapshot-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dotsnapshot
            asset_name: dotsnapshot-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dotsnapshot
            asset_name: dotsnapshot-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.release.outputs.release_tag }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Update version for release
      run: |
        # Update version to match the release (only package version, not rust-version)
        sed -i '/^\[package\]/,/^\[/ s/^version = ".*"$/version = "${{ needs.release.outputs.new_release_version }}"/' Cargo.toml
        cargo update --package dotsnapshot --precise "${{ needs.release.outputs.new_release_version }}"

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/registry/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary for distribution
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ runner.os }}" = "Windows" ]; then
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        else
          tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        fi
        cd ../../..
      shell: bash

    - name: Generate checksums
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          certutil -hashfile ${{ matrix.asset_name }}.zip SHA256 > ${{ matrix.asset_name }}.sha256
        else
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.sha256
        fi
      shell: bash

    - name: Upload release binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}-package
        path: |
          ${{ matrix.asset_name }}.*

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.release.outputs.release_tag }}
        files: |
          ${{ matrix.asset_name }}.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-main-version:
    name: Update main branch version after release
    needs: [release, build-release]
    runs-on: ubuntu-latest
    if: always() && needs.release.result == 'success' && needs.build-release.result == 'success'
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Update Cargo.toml version to next development version
      run: |
        # Get the current version from the release
        RELEASE_VERSION="${{ needs.release.outputs.new_release_version }}"
        echo "Released version: $RELEASE_VERSION"
        
        # Extract version components (e.g., 1.2.1 -> 1 2 1)
        IFS='.' read -r major minor patch <<< "${RELEASE_VERSION#v}"
        
        # Increment patch version for next development cycle
        next_patch=$((patch + 1))
        NEXT_VERSION="$major.$minor.$next_patch"
        echo "Next development version: $NEXT_VERSION"
        
        # Update Cargo.toml (only package version, not rust-version)
        sed -i '/^\[package\]/,/^\[/ s/^version = ".*"$/version = "'$NEXT_VERSION'"/' Cargo.toml
        
        # Update Cargo.lock
        cargo update --package dotsnapshot --precise "$NEXT_VERSION"
        
        echo "Updated version to $NEXT_VERSION"

    - name: Commit version update
      run: |
        RELEASE_VERSION="${{ needs.release.outputs.new_release_version }}"
        IFS='.' read -r major minor patch <<< "${RELEASE_VERSION#v}"
        next_patch=$((patch + 1))
        NEXT_VERSION="$major.$minor.$next_patch"
        
        git add Cargo.toml Cargo.lock
        git commit -m "chore: Bump version to $NEXT_VERSION for next development cycle

        Automated version bump after release $RELEASE_VERSION

        🤖 Generated with GitHub Actions"
        
        git push origin main

# Disabled crates.io publishing to prevent release failures
  # Re-enable when CRATES_IO_TOKEN is configured and crates.io publishing is desired
  # publish-crate:
  #   name: Publish to crates.io
  #   needs: [release, build-release]
  #   runs-on: ubuntu-latest
  #   if: needs.release.outputs.new_release_created == 'true'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       ref: ${{ needs.release.outputs.release_tag }}
  #
  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@stable
  #
  #   - name: Publish to crates.io
  #     run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
  #     continue-on-error: true