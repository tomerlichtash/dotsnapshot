name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  get-next-version:
    name: Get next version
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}
      new-release-notes: ${{ steps.get-next-version.outputs.new-release-notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get next version
        id: get-next-version
        run: npx -p semantic-release -p @semantic-release/changelog -p @semantic-release/git -p @semantic-release/github -p @semantic-release/exec semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: get-next-version
    if: needs.get-next-version.outputs.new-release-published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test

  build:
    name: Build
    runs-on: ${{ matrix.job.os }}
    needs: [get-next-version, test]
    if: needs.get-next-version.outputs.new-release-published == 'true'
    strategy:
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-cross: true }
          - { os: macos-latest, target: x86_64-apple-darwin, use-cross: false }
          - { os: macos-latest, target: aarch64-apple-darwin, use-cross: false }
          # Temporarily disabled Windows builds during semantic-release implementation
          # - { os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          targets: ${{ matrix.job.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.job.target }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross
        if: matrix.job.use-cross
        run: cargo install cross

      - name: Update version in Cargo.toml
        run: |
          awk -v ver="${{ needs.get-next-version.outputs.new-release-version }}" '/^version = / { sub(/= "[^"]*"/, "= \"" ver "\""); print; next } {print}' Cargo.toml > Cargo.toml.new && mv Cargo.toml.new Cargo.toml
          cargo update --package dotsnapshot --precise "${{ needs.get-next-version.outputs.new-release-version }}"

      - name: Build binary
        run: |
          if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi

      - name: Package binary
        id: package
        run: |
          PKG_BASENAME="dotsnapshot-v${{ needs.get-next-version.outputs.new-release-version }}-${{ matrix.job.target }}"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 
              PKG_NAME="$PKG_BASENAME.zip"
              7z a "$PKG_NAME" ./target/${{ matrix.job.target }}/release/dotsnapshot.exe
              ;;
            *)
              PKG_NAME="$PKG_BASENAME.tar.gz"
              tar -czf "$PKG_NAME" -C ./target/${{ matrix.job.target }}/release dotsnapshot
              ;;
          esac
          echo "pkg-name=$PKG_NAME" >> $GITHUB_OUTPUT

      - name: Generate checksum
        run: |
          case ${{ runner.os }} in
            Windows) certutil -hashfile "${{ steps.package.outputs.pkg-name }}" SHA256 > "${{ steps.package.outputs.pkg-name }}.sha256" ;;
            *) shasum -a 256 "${{ steps.package.outputs.pkg-name }}" > "${{ steps.package.outputs.pkg-name }}.sha256" ;;
          esac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.pkg-name }}
          path: |
            ${{ steps.package.outputs.pkg-name }}
            ${{ steps.package.outputs.pkg-name }}.sha256

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [get-next-version, test, build]
    if: needs.get-next-version.outputs.new-release-published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | while read file; do
            cp "$file" release-assets/
          done

      - name: Release
        run: npx -p semantic-release -p @semantic-release/changelog -p @semantic-release/git -p @semantic-release/github -p @semantic-release/exec semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}