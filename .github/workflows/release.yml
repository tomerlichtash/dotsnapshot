# Semantic Release Workflow
# 
# This workflow automatically creates releases using semantic-release based on conventional commit messages.
# It runs on every push to main branch and can be manually triggered via workflow_dispatch.
#
# Flow: test ‚Üí build ‚Üí release
# - Tests: Run Rust tests to ensure code quality
# - Build: Create binaries for all supported platforms
# - Release: Use semantic-release to analyze commits and create releases
#
# Semantic-release will:
# 1. Analyze commit messages since last release
# 2. Determine version bump (patch/minor/major) based on commit types
# 3. Update Cargo.toml version and generate CHANGELOG.md
# 4. Create GitHub release with generated binaries

name: Release

on:
  push:
    branches: [main]  # Triggers on every push to main (via merged PRs)
  workflow_dispatch:  # Allows manual triggering from GitHub UI

# Required permissions for semantic-release to work
permissions:
  contents: write        # Create releases, push commits, create tags
  issues: write         # Update issues (for release notes)
  pull-requests: write  # Update PRs (for release notes)

jobs:
  # JOB 1: TEST
  # Run all tests to ensure code quality and semantic-release config before building
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test semantic-release configuration
        # Test the version update logic from .releaserc.json before expensive builds
        # This catches configuration issues early and saves CI resources
        run: |
          echo "üß™ Testing semantic-release configuration..."
          chmod +x test-version-update.sh test-releaserc-command.sh
          echo "üìã Running basic version update tests..."
          ./test-version-update.sh
          echo "üìã Running .releaserc.json command tests..."
          ./test-releaserc-command.sh

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Rust tests
        run: cargo test

  # JOB 2: BUILD
  # Build binaries for all supported platforms
  # Runs in parallel for each target platform after tests pass
  build:
    name: Build
    runs-on: ${{ matrix.job.os }}
    needs: test  # Only run if tests pass
    strategy:
      matrix:
        job:
          # Linux builds
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false }   # Linux x86_64 (native)
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-cross: true }   # Linux ARM64 (cross-compile)
          # macOS builds  
          - { os: macos-latest, target: x86_64-apple-darwin, use-cross: false }         # macOS Intel (native)
          - { os: macos-latest, target: aarch64-apple-darwin, use-cross: false }        # macOS Apple Silicon (native)
          # Windows builds
          - { os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false }    # Windows x86_64 (native)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with target
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          targets: ${{ matrix.job.target }}  # Install target for cross-compilation

      - name: Cache Cargo dependencies (per target)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.job.target }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tool
        if: matrix.job.use-cross
        run: |
          # Check if cross is already installed and cached
          if ! command -v cross &> /dev/null; then
            echo "Installing cross-compilation tool..."
            cargo install cross --locked
          else
            echo "Cross already installed, version: $(cross --version)"
          fi

      - name: Build binary for target
        run: |
          if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
            # Use cross for cross-compilation (e.g., Linux ARM64)
            cross build --release --target ${{ matrix.job.target }}
          else
            # Use native cargo for same-architecture builds
            cargo build --release --target ${{ matrix.job.target }}
          fi

      - name: Package binary into archive
        id: package
        shell: bash
        run: |
          PKG_BASENAME="dotsnapshot-${{ matrix.job.target }}"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 
              # Windows: Create ZIP with .exe using PowerShell
              PKG_NAME="$PKG_BASENAME.zip"
              powershell "Compress-Archive -Path './target/${{ matrix.job.target }}/release/dotsnapshot.exe' -DestinationPath '$PKG_NAME'"
              ;;
            *)
              # Unix: Create tar.gz with binary
              PKG_NAME="$PKG_BASENAME.tar.gz"
              tar -czf "$PKG_NAME" -C ./target/${{ matrix.job.target }}/release dotsnapshot
              ;;
          esac
          echo "pkg-name=$PKG_NAME" >> $GITHUB_OUTPUT

      - name: Generate SHA256 checksum
        run: |
          case ${{ runner.os }} in
            Windows) 
              # Windows: Use certutil
              certutil -hashfile "${{ steps.package.outputs.pkg-name }}" SHA256 > "${{ steps.package.outputs.pkg-name }}.sha256"
              ;;
            *) 
              # Unix: Use shasum
              shasum -a 256 "${{ steps.package.outputs.pkg-name }}" > "${{ steps.package.outputs.pkg-name }}.sha256"
              ;;
          esac

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.pkg-name }}
          path: |
            ${{ steps.package.outputs.pkg-name }}
            ${{ steps.package.outputs.pkg-name }}.sha256

  # JOB 3: RELEASE  
  # Use semantic-release to analyze commits and create releases
  # Only runs if both test and build jobs succeed
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]  # Wait for both test and build to complete successfully
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for semantic-release to analyze commit history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts  # Downloads all artifacts from build jobs

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Required for running semantic-release

      - name: Prepare release assets for GitHub release
        run: |
          # Create directory for release assets
          mkdir -p release-assets
          
          # Debug: Show what we have
          echo "üìã Current directory contents:"
          ls -la
          
          echo "üìã Artifacts directory (if exists):"
          ls -la artifacts/ 2>/dev/null || echo "No artifacts directory found"
          
          # Simplified approach: copy all files we can find
          echo "üì¶ Searching for release assets..."
          
          # Use a more robust approach without pipes
          if [ -d "artifacts" ]; then
            # Find and copy all tar.gz files
            find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \; 2>/dev/null || true
            # Find and copy all zip files  
            find artifacts -name "*.zip" -exec cp {} release-assets/ \; 2>/dev/null || true
            # Find and copy all sha256 files
            find artifacts -name "*.sha256" -exec cp {} release-assets/ \; 2>/dev/null || true
            
            echo "‚úÖ Release assets prepared:"
            ls -la release-assets/ 2>/dev/null || echo "No files copied"
          else
            echo "‚ö†Ô∏è  No artifacts directory found - continuing without binaries"
          fi

      - name: Run semantic-release
        # This is the main step that handles everything:
        # 1. Analyzes commits since last release using conventional commit format
        # 2. Determines if a release should be created (feat/fix/BREAKING CHANGE)
        # 3. Calculates next version number (patch/minor/major)
        # 4. Updates Cargo.toml version using @semantic-release/exec
        # 5. Generates CHANGELOG.md using @semantic-release/changelog  
        # 6. Creates GitHub release with binaries using @semantic-release/github
        run: npx -p semantic-release -p @semantic-release/changelog -p @semantic-release/github -p @semantic-release/exec semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for GitHub API access